import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:hive_flutter/hive_flutter.dart';

import 'providers/goal_provider.dart';
import 'providers/daily_goal_provider.dart';
import 'providers/activity_provider.dart';

import 'screens/home_screen.dart';
import 'screens/log_screen.dart';
import 'ui/report/weekly_report_page.dart';
import 'screens/settings_screen.dart';

import 'models/daily_goal.dart';
import 'models/activity_log.dart';
import 'models/daily_summary.dart';
import 'models/app_prefs.dart';

import 'services/notification_service.dart';
import 'services/bootstrap_service.dart';

Future<void> main() async {
WidgetsFlutterBinding.ensureInitialized();

await Hive.initFlutter();
await _cleanupLegacyBoxes();

// Register Hive adapters
Hive.registerAdapter(GoalSourceAdapter());
Hive.registerAdapter(DailyGoalAdapter());
Hive.registerAdapter(ActivityTypeAdapter());
Hive.registerAdapter(ActivityLogAdapter());
Hive.registerAdapter(DailySummaryAdapter());
Hive.registerAdapter(AppPrefsAdapter());

// Open boxes
await Hive.openBox<DailyGoal>('daily_goals');
await Hive.openBox<ActivityLog>('activity_logs');
await Hive.openBox<DailySummary>('daily_summaries');
await Hive.openBox<AppPrefs>('app_prefs');
// Per-action targets (kcal) for today
await Hive.openBox<int>('activity_targets');

// Notifications (skip on Web)
if (!kIsWeb) {
await NotificationService.instance.init();
}

final goalProvider = GoalProvider();
// One-time migration from legacy in-memory values
await BootstrapService.migrateIfNeeded(goalProvider);
await goalProvider.loadToday();

runApp(
MultiProvider(
providers: [
ChangeNotifierProvider.value(value: goalProvider),
ChangeNotifierProvider<DailyGoalProvider>(create: (_) => DailyGoalProvider()),
ChangeNotifierProvider<ActivityProvider>(create: (_) => ActivityProvider()),
],
child: const KaerikaroApp(),
),
);
}

Future<void> _cleanupLegacyBoxes() async {
if (await Hive.boxExists('action_logs')) {
await Hive.deleteBoxFromDisk('action_logs');
}
}

class KaerikaroApp extends StatelessWidget {
const KaerikaroApp({super.key});

@override
Widget build(BuildContext context) {
return MaterialApp(
title: 'ÉJÉGÉäÉJÉç',
theme: ThemeData(useMaterial3: true, colorSchemeSeed: const Color(0xFF2EC4B6)),
home: const RootTabs(),
);
}
}

class RootTabs extends StatefulWidget {
const RootTabs({super.key});
@override
State<RootTabs> createState() => _RootTabsState();
}

class _RootTabsState extends State<RootTabs> {
int idx = 0;
final pages = const [
HomeScreen(),
LogScreen(),
WeeklyReportPage(),
SettingsScreen(),
];

@override
Widget build(BuildContext context) {
return Scaffold(
body: pages[idx],
bottomNavigationBar: NavigationBar(
selectedIndex: idx,
onDestinationSelected: (i) => setState(() => idx = i),
destinations: const [
NavigationDestination(icon: Icon(Icons.home), label: 'Home'),
NavigationDestination(icon: Icon(Icons.edit_note), label: 'Log'),
NavigationDestination(icon: Icon(Icons.bar_chart), label: 'Weekly'),
NavigationDestination(icon: Icon(Icons.settings), label: 'Settings'),
],
),
);
}
}


